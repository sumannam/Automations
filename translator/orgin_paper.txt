DEVS is a popular formalism for modeling complex dynamic systems using a discrete-event abstraction. In fact, it can serve as a simulation 
‘‘assembly language’’ to which models in other formalisms can be mapped.1 A number of tools have been constructed by academia and industry that

allow the modeling and simulation of DEVS models. Each of these tools was developed for a specific application domain, resulting in different design goals. Since there is no common DEVS format, used by all tools, modelers are tied to their tool. Switching between tools is far from trivial, as each tool uses its own API and language for model specification. Porting models between different tools equates to rewriting the model from scratch. This makes the initial choice of tool important, as switching comes at an arbitrary high cost for huge models. The problem is further aggravated in that each tool supports a different set of formalisms and features. Even worse, performance between different tools varies by orders of magnitude, depending on the domain and model. It is therefore necessary to provide an overview of the current state of different tools. Modelers will find an overview that can help them to decide which tool to use. Tool builders will have a better
idea of how each tool is positioned relative to similar tools.